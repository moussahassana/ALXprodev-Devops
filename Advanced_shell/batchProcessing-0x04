#!/bin/bash

# Create output and log directories
mkdir -p pokemon_data_parallel
mkdir -p logs

# List of Pokémon
pokemon_list=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Base URL and log file
base_url="https://pokeapi.co/api/v2/pokemon"
log_file="logs/fetch_parallel_errors.log"
> "$log_file"

# Track background job PIDs
pids=()

# Define cleanup function
cleanup() {
    echo "Interrupt received. Killing background jobs..."
    for pid in "${pids[@]}"; do
        kill "$pid" 2>/dev/null
    done
    exit 1
}

# Trap Ctrl+C or termination signals
trap cleanup SIGINT SIGTERM

# Function to fetch a single Pokémon
fetch_pokemon() {
    local name=$1
    echo "Fetching data for $name..."
    curl -s --fail "$base_url/$name" -o "pokemon_data_parallel/${name}.json"

    if [ $? -eq 0 ]; then
        echo "Saved data to pokemon_data_parallel/${name}.json "
    else
        echo "Failed to fetch data for $name" | tee -a "$log_file"
    fi
}

# Launch all fetches in parallel and store PIDs
for pokemon in "${pokemon_list[@]}"; do
    fetch_pokemon "$pokemon" &
    pids+=($!)
done

# Wait for all background jobs
for pid in "${pids[@]}"; do
    wait "$pid"
done

echo "All fetch operations completed."
